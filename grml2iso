#!/usr/bin/env bash
# Filename:      grml2iso
# Purpose:       create a multiboot grml ISO using grml2usb
# Authors:       Michael Prokop <mika@grml.org>,
#                Thorsten Glaser <tg@mirbsd.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################
# TODO:
# * support setting grml2usb options
################################################################################

# define function getfilesize before "set -e" {{{
  if stat --help >/dev/null 2>&1; then
    getfilesize='stat -c %s'        # GNU stat
  else
    getfilesize='stat -f %z'        # BSD stat
  fi
# }}}

# adjust variables if necessary through environment {{{
# path to the grml2usb script you'd like to use
  [ -n "$GRML2USB" ] || GRML2USB='grml2usb'
# work directory for creating the filesystem
  [ -n "$WRKDIR" ]   || WRKDIR='/tmp/grml2iso.tmp'
# support mkisofs as well as genisoimage
  if which mkisofs >/dev/null 2>&1; then
    MKISOFS='mkisofs'
  elif which genisoimage >/dev/null 2>&1; then
    MKISOFS='genisoimage'
  else
    echo >&2 "Error: neither mkisofs nor genisoimage available - can not create ISO."
    exit 1
fi
# }}}

# helper stuff {{{
  set -e

  usage() {
    echo >&2 "Usage: $0 [OPTIONS] -o target.iso source1.iso [source2.iso ...]"
    echo >&2 "
Options:
     -b Boot Params    Additional boot parameters passed to grml2usb
     -c Directory      Copy files from directory to generated iso
     -f                Force overwrite of existing target.iso
     -r BootParam      Remove specified boot params.
                       Could be specfied multiple times.
"
    [ -n "$1" ] && exit $1 || exit 1
  }
# }}}

# command line handling {{{
  [[ $# -gt 2 ]] || usage 1

  ISOFILE=''
  DIR=''
  ADD_OPTS=''
  FORCE=''
  typeset -a REMOVE_OPTS
  while getopts fb:c:o:r: name; do
    case $name in
      o)   ISOFILE="$OPTARG";;
      b)   ADD_OPTS="--bootoption="$OPTARG"";;
      c)   DIR="$OPTARG";;
      f)   FORCE='true';;
      r)   REMOVE_OPTS+=(--remove-bootoption="$OPTARG");;
      ?)   usage 2;;
    esac
  done

# make sure -o is specified
  [ -n "$ISOFILE" ] || usage 1

# we don't to override any files by accident
  if [ -e "$ISOFILE" -a ! -n "$FORCE" ]; then
    echo "Error: target file $ISOFILE exists already." >&2
    exit 1
  fi

  if [ ! -z "$DIR" -a ! -d "$DIR" ] ; then
     echo "Error: specified parameter for -c is not a directory" >&2
     exit 1
  fi
# }}}

# we need root permissions for executing grml2usb {{{
  if [[ $(id -u) != 0 ]]; then
    echo >&2 "Error: please run $0 as root."
    exit 1
  fi
# }}}

# check for grml2usb {{{
  if [ ! -x "$(which $GRML2USB)" ] || [ ! -x "$GRML2USB" ] ; then
    echo >&2 "Error: Could not find grml2usb"
    if [ -x "./$GRML2USB" ] ; then
      echo >&2 "If you executed grml2iso from the grml2usb repository use"
      echo >&2 "GRML2USB=./grml2usb $0 $*"
    fi
    exit 1
  fi
# }}}

# variables {{{
  ORIG_DIR="$(pwd)"
  # note: grub-pc_1.96+20090603-1 seems to be b0rken
  GRUB_VERSION="grub-pc_1.96+20080724-16"

# normalise path
  case $ISOFILE in
    /*) ;;
    *) ISOFILE=$ORIG_DIR/$ISOFILE ;;
  esac
# }}}

# create necessary stuff under WRKDIR {{{
  [ -d "$WRKDIR" ] && WRKDIR_EXISTED='true' || WRKDIR_EXISTED='false'
  rm -rf "$WRKDIR/cddir" "$WRKDIR/grub_tmp"
  mkdir -p "$WRKDIR/cddir"
# }}}}

# execute grml2usb with all ISOs you'd like to install {{{
  # remove all parameters
  shift $(($OPTIND - 1))

  $GRML2USB "${REMOVE_OPTS[@]}" ${ADD_OPTS:+"$ADD_OPTS"} "$@" "$WRKDIR/cddir"
# }}}


# move syslinux to isolinux {{{
  mv "$WRKDIR"/cddir/boot/syslinux "$WRKDIR"/cddir/boot/isolinux

  cd "$WRKDIR/cddir"
  echo "menu label ^Isolinux prompt" > boot/isolinux/promptname.cfg
  echo "include hd.cfg" >> boot/isolinux/grmlmain.cfg
# }}}

# copy specified directory to cd {{{
  if [ -n "$DIR" ] ; then
     echo >&2 "Copying ${DIR} to generated iso"
     rsync -a ${DIR}/ .
  fi

# }}}

# generate the CD/DVD ISO {{{
  $MKISOFS -V 'grml-multiboot' -l -r -J -no-pad \
    -no-emul-boot -boot-load-size 4 -boot-info-table \
    -b boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat \
    -o "$ISOFILE" .
# }}}

# pad the output ISO to multiples of 256 KiB for partition table support {{{
  siz=$($getfilesize "$ISOFILE")
  cyls=$(echo "$siz / 512 / 32 / 16 + 1" | bc)  # C=$cyls H=16 S=32
  ofs=$(echo "$cyls * 16 * 32 * 512 - 1" | bc)  # padding offset (size - 1)
  dd if=/dev/zero bs=1 count=1 seek=$ofs of="$ISOFILE" 2>/dev/null
# }}}


# cleanup {{{
  cd "$ORIG_DIR"
  sync
  rm -rf "$WRKDIR/cddir" "$WRKDIR/grub_tmp"
  [[ $WRKDIR_EXISTED = 'false' ]] && rmdir "$WRKDIR"
  echo "Generated $ISOFILE"
# }}}

## EOF #########################################################################
# vim:foldmethod=marker ts=2 ft=sh ai expandtab tw=80 sw=3
